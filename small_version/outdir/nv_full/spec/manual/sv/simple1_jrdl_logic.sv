//   Ordt 170915.01 autogenerated file 
//   Input: test.rdl
//   Parms: test.parms
//   Date: Mon Feb 05 16:51:52 CET 2018
//

//
//---------- module simple1_jrdl_logic
//
module simple1_jrdl_logic
(
  clk,
  reset,
  d2l_stats_disable_check_0_w,
  d2l_stats_disable_check_0_we,
  d2l_stats_disable_check_0_re,
  d2l_stats_disable_check_1_w,
  d2l_stats_disable_check_1_we,
  d2l_stats_disable_check_1_re,
  d2l_stats_features_w,
  d2l_stats_features_we,
  d2l_stats_features_re,
  d2l_stats_log_address1_w,
  d2l_stats_log_address1_we,
  d2l_stats_log_address1_re,
  d2l_stats_log_address2_w,
  d2l_stats_log_address2_we,
  d2l_stats_log_address2_re,
  d2l_stats_wide_reg_w,
  d2l_stats_wide_reg_we,
  d2l_stats_wide_reg_re,
  d2l_rdr_reorder_window_w,
  d2l_rdr_reorder_window_we,
  d2l_rdr_reorder_window_re,
  d2l_rdr_stream_reconf_w,
  d2l_rdr_stream_reconf_we,
  d2l_rdr_stream_reconf_re,
  d2l_rdr_roll32_counter_reg_w,
  d2l_rdr_roll32_counter_reg_we,
  d2l_rdr_roll32_counter_reg_re,
  d2l_rdr_sat32_counter_reg_w,
  d2l_rdr_sat32_counter_reg_we,
  d2l_rdr_sat32_counter_reg_re,
  d2l_rdr_rcnt_sat_log_w,
  d2l_rdr_rcnt_sat_log_we,
  d2l_rdr_rcnt_sat_log_re,
  d2l_extra_reg_w,
  d2l_extra_reg_we,
  d2l_extra_reg_re,
  h2l_stats_disable_check_0_l0_b0_intr,
  h2l_stats_disable_check_0_l0_b1_intr,
  h2l_stats_disable_check_0_l0_b2_intr,
  h2l_stats_disable_check_1_l0_b0_intr,
  h2l_stats_disable_check_1_l0_b1_intr,
  h2l_stats_disable_check_1_l0_b2_intr,
  h2l_stats_log_address1_value_w,
  h2l_stats_log_address1_value_we,
  h2l_stats_log_address2_value_w,
  h2l_stats_log_address2_value_we,
  h2l_stats_wide_reg_value_w,
  h2l_stats_wide_reg_value_we,
  h2l_rdr_stream_reconf_busy_w,
  h2l_rdr_roll32_counter_reg_count_w,
  h2l_rdr_roll32_counter_reg_count_incr,
  h2l_rdr_roll32_counter_reg_count_we,
  h2l_rdr_sat32_counter_reg_count_w,
  h2l_rdr_sat32_counter_reg_count_incr,
  h2l_rdr_sat32_counter_reg_count_we,
  h2l_rdr_rcnt_sat_log_subch_w,
  h2l_rdr_rcnt_sat_log_subch_we,
  h2l_rdr_rcnt_sat_log_str_w,
  h2l_rdr_rcnt_sat_log_str_we,
  h2l_rdr_rcnt_sat_log_count_w,
  h2l_rdr_rcnt_sat_log_count_we,

  l2d_stats_disable_check_0_r,
  l2d_stats_disable_check_1_r,
  l2d_stats_features_r,
  l2d_stats_log_address1_r,
  l2d_stats_log_address2_r,
  l2d_stats_wide_reg_r,
  l2d_rdr_reorder_window_r,
  l2d_rdr_stream_reconf_r,
  l2d_rdr_roll32_counter_reg_r,
  l2d_rdr_sat32_counter_reg_r,
  l2d_rdr_rcnt_sat_log_r,
  l2d_extra_reg_r,
  l2h_stats_disable_check_0_timer_sram_r,
  l2h_stats_disable_check_0_cbuf_fifo_r,
  l2h_stats_disable_check_0_lut_st_r,
  l2h_stats_disable_check_0_l0_b0_r,
  l2h_stats_disable_check_0_l0_b1_r,
  l2h_stats_disable_check_0_l0_b2_r,
  l2h_stats_disable_check_0_l0_b3_r,
  l2h_stats_disable_check_0_intr_o,
  l2h_stats_disable_check_0_halt_o,
  l2h_stats_disable_check_1_timer_sram_r,
  l2h_stats_disable_check_1_cbuf_fifo_r,
  l2h_stats_disable_check_1_lut_st_r,
  l2h_stats_disable_check_1_l0_b0_r,
  l2h_stats_disable_check_1_l0_b1_r,
  l2h_stats_disable_check_1_l0_b2_r,
  l2h_stats_disable_check_1_l0_b3_r,
  l2h_stats_disable_check_1_intr_o,
  l2h_stats_disable_check_1_halt_o,
  l2h_stats_wide_reg_value_r,
  l2h_rdr_reorder_window_ws_enable_r,
  l2h_rdr_reorder_window_set_back_r,
  l2h_rdr_reorder_window_size_r,
  l2h_rdr_stream_reconf_stream_r,
  l2h_rdr_roll32_counter_reg_count_overflow_o,
  l2h_rdr_roll32_counter_reg_count_r,
  l2h_rdr_sat32_counter_reg_count_incrthold_o,
  l2h_rdr_sat32_counter_reg_count_r,
  l2h_rdr_rcnt_sat_log_en_r,
  l2h_rdr_rcnt_sat_log_count_r,
  l2h_extra_reg_value_r );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] d2l_stats_disable_check_0_w;
  input    d2l_stats_disable_check_0_we;
  input    d2l_stats_disable_check_0_re;
  input     [31:0] d2l_stats_disable_check_1_w;
  input    d2l_stats_disable_check_1_we;
  input    d2l_stats_disable_check_1_re;
  input     [31:0] d2l_stats_features_w;
  input    d2l_stats_features_we;
  input    d2l_stats_features_re;
  input     [31:0] d2l_stats_log_address1_w;
  input    d2l_stats_log_address1_we;
  input    d2l_stats_log_address1_re;
  input     [31:0] d2l_stats_log_address2_w;
  input    d2l_stats_log_address2_we;
  input    d2l_stats_log_address2_re;
  input     [127:0] d2l_stats_wide_reg_w;
  input    d2l_stats_wide_reg_we;
  input    d2l_stats_wide_reg_re;
  input     [31:0] d2l_rdr_reorder_window_w;
  input    d2l_rdr_reorder_window_we;
  input    d2l_rdr_reorder_window_re;
  input     [31:0] d2l_rdr_stream_reconf_w;
  input    d2l_rdr_stream_reconf_we;
  input    d2l_rdr_stream_reconf_re;
  input     [31:0] d2l_rdr_roll32_counter_reg_w;
  input    d2l_rdr_roll32_counter_reg_we;
  input    d2l_rdr_roll32_counter_reg_re;
  input     [31:0] d2l_rdr_sat32_counter_reg_w;
  input    d2l_rdr_sat32_counter_reg_we;
  input    d2l_rdr_sat32_counter_reg_re;
  input     [31:0] d2l_rdr_rcnt_sat_log_w;
  input    d2l_rdr_rcnt_sat_log_we;
  input    d2l_rdr_rcnt_sat_log_re;
  input     [31:0] d2l_extra_reg_w;
  input    d2l_extra_reg_we;
  input    d2l_extra_reg_re;
  input    h2l_stats_disable_check_0_l0_b0_intr;
  input    h2l_stats_disable_check_0_l0_b1_intr;
  input    h2l_stats_disable_check_0_l0_b2_intr;
  input    h2l_stats_disable_check_1_l0_b0_intr;
  input    h2l_stats_disable_check_1_l0_b1_intr;
  input    h2l_stats_disable_check_1_l0_b2_intr;
  input     [9:0] h2l_stats_log_address1_value_w;
  input    h2l_stats_log_address1_value_we;
  input     [9:0] h2l_stats_log_address2_value_w;
  input    h2l_stats_log_address2_value_we;
  input     [95:0] h2l_stats_wide_reg_value_w;
  input    h2l_stats_wide_reg_value_we;
  input    h2l_rdr_stream_reconf_busy_w;
  input     [3:0] h2l_rdr_roll32_counter_reg_count_w;
  input    h2l_rdr_roll32_counter_reg_count_incr;
  input    h2l_rdr_roll32_counter_reg_count_we;
  input     [3:0] h2l_rdr_sat32_counter_reg_count_w;
  input    h2l_rdr_sat32_counter_reg_count_incr;
  input    h2l_rdr_sat32_counter_reg_count_we;
  input     [4:0] h2l_rdr_rcnt_sat_log_subch_w;
  input    h2l_rdr_rcnt_sat_log_subch_we;
  input     [9:0] h2l_rdr_rcnt_sat_log_str_w;
  input    h2l_rdr_rcnt_sat_log_str_we;
  input     [15:0] h2l_rdr_rcnt_sat_log_count_w;
  input    h2l_rdr_rcnt_sat_log_count_we;

  //------- outputs
  output     [31:0] l2d_stats_disable_check_0_r;
  output     [31:0] l2d_stats_disable_check_1_r;
  output     [31:0] l2d_stats_features_r;
  output     [31:0] l2d_stats_log_address1_r;
  output     [31:0] l2d_stats_log_address2_r;
  output     [127:0] l2d_stats_wide_reg_r;
  output     [31:0] l2d_rdr_reorder_window_r;
  output     [31:0] l2d_rdr_stream_reconf_r;
  output     [31:0] l2d_rdr_roll32_counter_reg_r;
  output     [31:0] l2d_rdr_sat32_counter_reg_r;
  output     [31:0] l2d_rdr_rcnt_sat_log_r;
  output     [31:0] l2d_extra_reg_r;
  output    l2h_stats_disable_check_0_timer_sram_r;
  output    l2h_stats_disable_check_0_cbuf_fifo_r;
  output    l2h_stats_disable_check_0_lut_st_r;
  output    l2h_stats_disable_check_0_l0_b0_r;
  output    l2h_stats_disable_check_0_l0_b1_r;
  output    l2h_stats_disable_check_0_l0_b2_r;
  output    l2h_stats_disable_check_0_l0_b3_r;
  output    l2h_stats_disable_check_0_intr_o;
  output    l2h_stats_disable_check_0_halt_o;
  output    l2h_stats_disable_check_1_timer_sram_r;
  output    l2h_stats_disable_check_1_cbuf_fifo_r;
  output    l2h_stats_disable_check_1_lut_st_r;
  output    l2h_stats_disable_check_1_l0_b0_r;
  output    l2h_stats_disable_check_1_l0_b1_r;
  output    l2h_stats_disable_check_1_l0_b2_r;
  output    l2h_stats_disable_check_1_l0_b3_r;
  output    l2h_stats_disable_check_1_intr_o;
  output    l2h_stats_disable_check_1_halt_o;
  output     [95:0] l2h_stats_wide_reg_value_r;
  output    l2h_rdr_reorder_window_ws_enable_r;
  output     [10:0] l2h_rdr_reorder_window_set_back_r;
  output     [10:0] l2h_rdr_reorder_window_size_r;
  output     [9:0] l2h_rdr_stream_reconf_stream_r;
  output    l2h_rdr_roll32_counter_reg_count_overflow_o;
  output     [3:0] l2h_rdr_roll32_counter_reg_count_r;
  output    l2h_rdr_sat32_counter_reg_count_incrthold_o;
  output     [3:0] l2h_rdr_sat32_counter_reg_count_r;
  output    l2h_rdr_rcnt_sat_log_en_r;
  output     [15:0] l2h_rdr_rcnt_sat_log_count_r;
  output     [31:0] l2h_extra_reg_value_r;


  //------- wire defines
  logic  h2l_stats_disable_check_0_l0_b0_intr;
  logic  h2l_stats_disable_check_0_l0_b1_intr;
  logic  h2l_stats_disable_check_0_l0_b2_intr;
  logic  h2l_stats_disable_check_1_l0_b0_intr;
  logic  h2l_stats_disable_check_1_l0_b1_intr;
  logic  h2l_stats_disable_check_1_l0_b2_intr;
  logic   [1:0] rg_stats_features_version;
  logic  rg_stats_features_syn_logged;
  logic   [4:0] rg_stats_features_wdth;
  logic  rg_stats_features_generator;
  logic  rg_stats_features_checker;
  logic  rg_stats_features_correctable;
  logic  rg_stats_features_adr_logged;
  
  //------- reg defines
  logic  rg_stats_disable_check_0_timer_sram;
  logic  reg_stats_disable_check_0_timer_sram_next;
  logic  l2h_stats_disable_check_0_timer_sram_r;
  logic  rg_stats_disable_check_0_cbuf_fifo;
  logic  reg_stats_disable_check_0_cbuf_fifo_next;
  logic  l2h_stats_disable_check_0_cbuf_fifo_r;
  logic  rg_stats_disable_check_0_lut_st;
  logic  reg_stats_disable_check_0_lut_st_next;
  logic  l2h_stats_disable_check_0_lut_st_r;
  logic  rg_stats_disable_check_0_l0_b0;
  logic  reg_stats_disable_check_0_l0_b0_next;
  logic  l2h_stats_disable_check_0_intr_o;
  logic  l2h_stats_disable_check_0_l0_b0_r;
  logic  rg_stats_disable_check_0_l0_b1;
  logic  reg_stats_disable_check_0_l0_b1_next;
  logic  l2h_stats_disable_check_0_l0_b1_r;
  logic  rg_stats_disable_check_0_l0_b2;
  logic  reg_stats_disable_check_0_l0_b2_next;
  logic  l2h_stats_disable_check_0_halt_o;
  logic  l2h_stats_disable_check_0_l0_b2_r;
  logic  rg_stats_disable_check_0_l0_b3;
  logic  reg_stats_disable_check_0_l0_b3_next;
  logic  l2h_stats_disable_check_0_l0_b3_r;
  logic   [31:0] l2d_stats_disable_check_0_r;
  logic  rg_stats_disable_check_1_timer_sram;
  logic  reg_stats_disable_check_1_timer_sram_next;
  logic  l2h_stats_disable_check_1_timer_sram_r;
  logic  rg_stats_disable_check_1_cbuf_fifo;
  logic  reg_stats_disable_check_1_cbuf_fifo_next;
  logic  l2h_stats_disable_check_1_cbuf_fifo_r;
  logic  rg_stats_disable_check_1_lut_st;
  logic  reg_stats_disable_check_1_lut_st_next;
  logic  l2h_stats_disable_check_1_lut_st_r;
  logic  rg_stats_disable_check_1_l0_b0;
  logic  reg_stats_disable_check_1_l0_b0_next;
  logic  l2h_stats_disable_check_1_intr_o;
  logic  l2h_stats_disable_check_1_l0_b0_r;
  logic  rg_stats_disable_check_1_l0_b1;
  logic  reg_stats_disable_check_1_l0_b1_next;
  logic  l2h_stats_disable_check_1_l0_b1_r;
  logic  rg_stats_disable_check_1_l0_b2;
  logic  reg_stats_disable_check_1_l0_b2_next;
  logic  l2h_stats_disable_check_1_halt_o;
  logic  l2h_stats_disable_check_1_l0_b2_r;
  logic  rg_stats_disable_check_1_l0_b3;
  logic  reg_stats_disable_check_1_l0_b3_next;
  logic  l2h_stats_disable_check_1_l0_b3_r;
  logic   [31:0] l2d_stats_disable_check_1_r;
  logic   [31:0] l2d_stats_features_r;
  logic   [9:0] rg_stats_log_address1_value;
  logic   [9:0] reg_stats_log_address1_value_next;
  logic   [31:0] l2d_stats_log_address1_r;
  logic   [9:0] rg_stats_log_address2_value;
  logic   [9:0] reg_stats_log_address2_value_next;
  logic   [31:0] l2d_stats_log_address2_r;
  logic   [95:0] rg_stats_wide_reg_value;
  logic   [95:0] reg_stats_wide_reg_value_next;
  logic   [95:0] l2h_stats_wide_reg_value_r;
  logic   [127:0] l2d_stats_wide_reg_r;
  logic  rg_rdr_reorder_window_ws_enable;
  logic  reg_rdr_reorder_window_ws_enable_next;
  logic  l2h_rdr_reorder_window_ws_enable_r;
  logic   [10:0] rg_rdr_reorder_window_set_back;
  logic   [10:0] reg_rdr_reorder_window_set_back_next;
  logic   [10:0] l2h_rdr_reorder_window_set_back_r;
  logic   [10:0] rg_rdr_reorder_window_size;
  logic   [10:0] reg_rdr_reorder_window_size_next;
  logic   [10:0] l2h_rdr_reorder_window_size_r;
  logic   [31:0] l2d_rdr_reorder_window_r;
  logic  rg_rdr_stream_reconf_busy;
  logic   [9:0] rg_rdr_stream_reconf_stream;
  logic   [9:0] reg_rdr_stream_reconf_stream_next;
  logic   [9:0] l2h_rdr_stream_reconf_stream_r;
  logic   [31:0] l2d_rdr_stream_reconf_r;
  logic   [3:0] rg_rdr_roll32_counter_reg_count;
  logic   [3:0] reg_rdr_roll32_counter_reg_count_next;
  logic   [4:0] cntr_rdr_roll32_counter_reg_count_next;
  logic  l2h_rdr_roll32_counter_reg_count_overflow_o;
  logic   [3:0] l2h_rdr_roll32_counter_reg_count_r;
  logic   [31:0] l2d_rdr_roll32_counter_reg_r;
  logic   [3:0] rg_rdr_sat32_counter_reg_count;
  logic   [3:0] reg_rdr_sat32_counter_reg_count_next;
  logic   [4:0] cntr_rdr_sat32_counter_reg_count_next;
  logic  l2h_rdr_sat32_counter_reg_count_incrsat_o;
  logic  l2h_rdr_sat32_counter_reg_count_incrthold_o;
  logic   [3:0] l2h_rdr_sat32_counter_reg_count_r;
  logic   [31:0] l2d_rdr_sat32_counter_reg_r;
  logic  rg_rdr_rcnt_sat_log_en;
  logic  reg_rdr_rcnt_sat_log_en_next;
  logic  l2h_rdr_rcnt_sat_log_en_r;
  logic   [4:0] rg_rdr_rcnt_sat_log_subch;
  logic   [4:0] reg_rdr_rcnt_sat_log_subch_next;
  logic   [9:0] rg_rdr_rcnt_sat_log_str;
  logic   [9:0] reg_rdr_rcnt_sat_log_str_next;
  logic   [15:0] rg_rdr_rcnt_sat_log_count;
  logic   [15:0] reg_rdr_rcnt_sat_log_count_next;
  logic   [16:0] cntr_rdr_rcnt_sat_log_count_next;
  logic  h2l_rdr_rcnt_sat_log_count_incr;
  logic  l2h_rdr_rcnt_sat_log_count_incrsat_o;
  logic   [15:0] l2h_rdr_rcnt_sat_log_count_r;
  logic   [31:0] l2d_rdr_rcnt_sat_log_r;
  logic   [31:0] rg_extra_reg_value;
  logic   [31:0] reg_extra_reg_value_next;
  logic   [31:0] l2h_extra_reg_value_r;
  logic   [31:0] l2d_extra_reg_r;
  
  
  //------- assigns
  assign  rg_stats_features_version = 2'd2;
  assign  rg_stats_features_syn_logged = 1'd0;
  assign  rg_stats_features_wdth = 5'd7;
  assign  rg_stats_features_generator = 1'd1;
  assign  rg_stats_features_checker = 1'd1;
  assign  rg_stats_features_correctable = 1'd0;
  assign  rg_stats_features_adr_logged = 1'd1;
  
  //------- combinatorial assigns for stats_features (pio read data)
  always_comb begin
    l2d_stats_features_r = 32'b0;
    l2d_stats_features_r [31:30]  = rg_stats_features_version;
    l2d_stats_features_r [9]  = rg_stats_features_syn_logged;
    l2d_stats_features_r [8:4]  = rg_stats_features_wdth;
    l2d_stats_features_r [3]  = rg_stats_features_generator;
    l2d_stats_features_r [2]  = rg_stats_features_checker;
    l2d_stats_features_r [1]  = rg_stats_features_correctable;
    l2d_stats_features_r [0]  = rg_stats_features_adr_logged;
  end
  
  //------- combinatorial assigns for stats_log_address2 (pio read data)
  always_comb begin
    l2d_stats_log_address2_r = 32'b0;
    l2d_stats_log_address2_r [9:0]  = rg_stats_log_address2_value;
  end
  
  //------- combinatorial assigns for rdr_sat32_counter_reg
  always_comb begin
    reg_rdr_sat32_counter_reg_count_next = rg_rdr_sat32_counter_reg_count;
    cntr_rdr_sat32_counter_reg_count_next = { 1'b0, rg_rdr_sat32_counter_reg_count};
    l2h_rdr_sat32_counter_reg_count_r = rg_rdr_sat32_counter_reg_count;
    if (d2l_rdr_sat32_counter_reg_we) cntr_rdr_sat32_counter_reg_count_next = d2l_rdr_sat32_counter_reg_w [3:0] ;
    if (d2l_rdr_sat32_counter_reg_re) cntr_rdr_sat32_counter_reg_count_next = 4'b0;
    if (h2l_rdr_sat32_counter_reg_count_incr)
       cntr_rdr_sat32_counter_reg_count_next = cntr_rdr_sat32_counter_reg_count_next + 5'd1;
    if (cntr_rdr_sat32_counter_reg_count_next > 5'b1111)
       cntr_rdr_sat32_counter_reg_count_next = 5'b1111;
    l2h_rdr_sat32_counter_reg_count_incrsat_o = ( {1'b0, rg_rdr_sat32_counter_reg_count} == 5'b1111);
    l2h_rdr_sat32_counter_reg_count_incrthold_o = ( {1'b0, rg_rdr_sat32_counter_reg_count} == 5'h8);
    reg_rdr_sat32_counter_reg_count_next = cntr_rdr_sat32_counter_reg_count_next [3:0] ;
    if (h2l_rdr_sat32_counter_reg_count_we) reg_rdr_sat32_counter_reg_count_next = h2l_rdr_sat32_counter_reg_count_w;
  end
  
  //------- reg assigns for rdr_sat32_counter_reg
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_rdr_sat32_counter_reg_count <= #1 4'd0;
    end
    else begin
      rg_rdr_sat32_counter_reg_count <= #1  reg_rdr_sat32_counter_reg_count_next;
    end
  end
  
  //------- combinatorial assigns for stats_log_address1
  always_comb begin
    reg_stats_log_address1_value_next = rg_stats_log_address1_value;
    if (h2l_stats_log_address1_value_we) reg_stats_log_address1_value_next = h2l_stats_log_address1_value_w;
    if (d2l_stats_log_address1_we) reg_stats_log_address1_value_next = d2l_stats_log_address1_w [9:0] ;
  end
  
  //------- reg assigns for stats_log_address1
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_stats_log_address1_value <= #1 10'd0;
    end
    else begin
      rg_stats_log_address1_value <= #1  reg_stats_log_address1_value_next;
    end
  end
  
  //------- combinatorial assigns for rdr_stream_reconf
  always_comb begin
    rg_rdr_stream_reconf_busy =  h2l_rdr_stream_reconf_busy_w;
    reg_rdr_stream_reconf_stream_next = rg_rdr_stream_reconf_stream;
    l2h_rdr_stream_reconf_stream_r = rg_rdr_stream_reconf_stream;
    if (d2l_rdr_stream_reconf_we) reg_rdr_stream_reconf_stream_next = d2l_rdr_stream_reconf_w [9:0] ;
  end
  
  //------- reg assigns for rdr_stream_reconf
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_rdr_stream_reconf_stream <= #1 10'd0;
    end
    else begin
      rg_rdr_stream_reconf_stream <= #1  reg_rdr_stream_reconf_stream_next;
    end
  end
  
  //------- combinatorial assigns for stats_log_address2
  always_comb begin
    reg_stats_log_address2_value_next = rg_stats_log_address2_value;
    if (h2l_stats_log_address2_value_we) reg_stats_log_address2_value_next = h2l_stats_log_address2_value_w;
    if (d2l_stats_log_address2_we) reg_stats_log_address2_value_next = d2l_stats_log_address2_w [9:0] ;
  end
  
  //------- reg assigns for stats_log_address2
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_stats_log_address2_value <= #1 10'd0;
    end
    else begin
      rg_stats_log_address2_value <= #1  reg_stats_log_address2_value_next;
    end
  end
  
  //------- combinatorial assigns for stats_log_address1 (pio read data)
  always_comb begin
    l2d_stats_log_address1_r = 32'b0;
    l2d_stats_log_address1_r [9:0]  = rg_stats_log_address1_value;
  end
  
  //------- combinatorial assigns for stats_wide_reg
  always_comb begin
    reg_stats_wide_reg_value_next = rg_stats_wide_reg_value;
    l2h_stats_wide_reg_value_r = rg_stats_wide_reg_value;
    if (h2l_stats_wide_reg_value_we) reg_stats_wide_reg_value_next = h2l_stats_wide_reg_value_w;
    if (d2l_stats_wide_reg_we) reg_stats_wide_reg_value_next = d2l_stats_wide_reg_w [95:0] ;
  end
  
  //------- reg assigns for stats_wide_reg
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_stats_wide_reg_value <= #1 96'ha5a5a5a5a5a5a5a5a5a5a5a5;
    end
    else begin
      rg_stats_wide_reg_value <= #1  reg_stats_wide_reg_value_next;
    end
  end
  
  //------- combinatorial assigns for rdr_stream_reconf (pio read data)
  always_comb begin
    l2d_rdr_stream_reconf_r = 32'b0;
    l2d_rdr_stream_reconf_r [16]  = rg_rdr_stream_reconf_busy;
    l2d_rdr_stream_reconf_r [9:0]  = rg_rdr_stream_reconf_stream;
  end
  
  //------- combinatorial assigns for rdr_rcnt_sat_log (pio read data)
  always_comb begin
    l2d_rdr_rcnt_sat_log_r [31]  = rg_rdr_rcnt_sat_log_en;
    l2d_rdr_rcnt_sat_log_r [30:26]  = rg_rdr_rcnt_sat_log_subch;
    l2d_rdr_rcnt_sat_log_r [25:16]  = rg_rdr_rcnt_sat_log_str;
    l2d_rdr_rcnt_sat_log_r [15:0]  = rg_rdr_rcnt_sat_log_count;
  end
  
  //------- combinatorial assigns for rdr_reorder_window
  always_comb begin
    reg_rdr_reorder_window_ws_enable_next = rg_rdr_reorder_window_ws_enable;
    l2h_rdr_reorder_window_ws_enable_r = rg_rdr_reorder_window_ws_enable;
    reg_rdr_reorder_window_set_back_next = rg_rdr_reorder_window_set_back;
    l2h_rdr_reorder_window_set_back_r = rg_rdr_reorder_window_set_back;
    reg_rdr_reorder_window_size_next = rg_rdr_reorder_window_size;
    l2h_rdr_reorder_window_size_r = rg_rdr_reorder_window_size;
    if (d2l_rdr_reorder_window_we) reg_rdr_reorder_window_ws_enable_next = d2l_rdr_reorder_window_w [31] ;
    if (d2l_rdr_reorder_window_we) reg_rdr_reorder_window_set_back_next = d2l_rdr_reorder_window_w [26:16] ;
    if (d2l_rdr_reorder_window_we) reg_rdr_reorder_window_size_next = d2l_rdr_reorder_window_w [10:0] ;
  end
  
  //------- reg assigns for rdr_reorder_window
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_rdr_reorder_window_ws_enable <= #1 1'd1;
      rg_rdr_reorder_window_set_back <= #1 11'd16;
      rg_rdr_reorder_window_size <= #1 11'd128;
    end
    else begin
      rg_rdr_reorder_window_ws_enable <= #1  reg_rdr_reorder_window_ws_enable_next;
      rg_rdr_reorder_window_set_back <= #1  reg_rdr_reorder_window_set_back_next;
      rg_rdr_reorder_window_size <= #1  reg_rdr_reorder_window_size_next;
    end
  end
  
  //------- combinatorial assigns for stats_disable_check_1 (pio read data)
  always_comb begin
    l2d_stats_disable_check_1_r = 32'b0;
    l2d_stats_disable_check_1_r [0]  = rg_stats_disable_check_1_timer_sram;
    l2d_stats_disable_check_1_r [1]  = rg_stats_disable_check_1_cbuf_fifo;
    l2d_stats_disable_check_1_r [2]  = rg_stats_disable_check_1_lut_st;
    l2d_stats_disable_check_1_r [3]  = rg_stats_disable_check_1_l0_b0;
    l2d_stats_disable_check_1_r [4]  = rg_stats_disable_check_1_l0_b1;
    l2d_stats_disable_check_1_r [5]  = rg_stats_disable_check_1_l0_b2;
    l2d_stats_disable_check_1_r [6]  = rg_stats_disable_check_1_l0_b3;
  end
  
  //------- combinatorial assigns for stats_wide_reg (pio read data)
  always_comb begin
    l2d_stats_wide_reg_r = 128'b0;
    l2d_stats_wide_reg_r [95:0]  = rg_stats_wide_reg_value;
  end
  
  //------- combinatorial assigns for extra_reg (pio read data)
  always_comb begin
    l2d_extra_reg_r = rg_extra_reg_value;
  end
  
  //------- combinatorial assigns for rdr_reorder_window (pio read data)
  always_comb begin
    l2d_rdr_reorder_window_r = 32'b0;
    l2d_rdr_reorder_window_r [31]  = rg_rdr_reorder_window_ws_enable;
    l2d_rdr_reorder_window_r [26:16]  = rg_rdr_reorder_window_set_back;
    l2d_rdr_reorder_window_r [10:0]  = rg_rdr_reorder_window_size;
  end
  
  //------- combinatorial assigns for extra_reg
  always_comb begin
    reg_extra_reg_value_next = rg_extra_reg_value;
    l2h_extra_reg_value_r = rg_extra_reg_value;
    if (d2l_extra_reg_we) reg_extra_reg_value_next = d2l_extra_reg_w;
  end
  
  //------- reg assigns for extra_reg
  always_ff @ (posedge clk) begin
    rg_extra_reg_value <= #1  reg_extra_reg_value_next;
  end
  
  //------- combinatorial assigns for stats_disable_check_0 (pio read data)
  always_comb begin
    l2d_stats_disable_check_0_r = 32'b0;
    l2d_stats_disable_check_0_r [0]  = rg_stats_disable_check_0_timer_sram;
    l2d_stats_disable_check_0_r [1]  = rg_stats_disable_check_0_cbuf_fifo;
    l2d_stats_disable_check_0_r [2]  = rg_stats_disable_check_0_lut_st;
    l2d_stats_disable_check_0_r [3]  = rg_stats_disable_check_0_l0_b0;
    l2d_stats_disable_check_0_r [4]  = rg_stats_disable_check_0_l0_b1;
    l2d_stats_disable_check_0_r [5]  = rg_stats_disable_check_0_l0_b2;
    l2d_stats_disable_check_0_r [6]  = rg_stats_disable_check_0_l0_b3;
  end
  
  //------- combinatorial assigns for stats_disable_check_0
  always_comb begin
    reg_stats_disable_check_0_timer_sram_next = rg_stats_disable_check_0_timer_sram;
    l2h_stats_disable_check_0_timer_sram_r = rg_stats_disable_check_0_timer_sram;
    reg_stats_disable_check_0_cbuf_fifo_next = rg_stats_disable_check_0_cbuf_fifo;
    l2h_stats_disable_check_0_cbuf_fifo_r = rg_stats_disable_check_0_cbuf_fifo;
    reg_stats_disable_check_0_lut_st_next = rg_stats_disable_check_0_lut_st;
    l2h_stats_disable_check_0_lut_st_r = rg_stats_disable_check_0_lut_st;
    reg_stats_disable_check_0_l0_b0_next = rg_stats_disable_check_0_l0_b0;
    l2h_stats_disable_check_0_l0_b0_r = rg_stats_disable_check_0_l0_b0;
    reg_stats_disable_check_0_l0_b1_next = rg_stats_disable_check_0_l0_b1;
    l2h_stats_disable_check_0_l0_b1_r = rg_stats_disable_check_0_l0_b1;
    reg_stats_disable_check_0_l0_b2_next = rg_stats_disable_check_0_l0_b2;
    l2h_stats_disable_check_0_l0_b2_r = rg_stats_disable_check_0_l0_b2;
    reg_stats_disable_check_0_l0_b3_next = rg_stats_disable_check_0_l0_b3;
    l2h_stats_disable_check_0_l0_b3_r = rg_stats_disable_check_0_l0_b3;
    l2h_stats_disable_check_0_intr_o = 1'b0;
    reg_stats_disable_check_0_l0_b0_next = (h2l_stats_disable_check_0_l0_b0_intr | rg_stats_disable_check_0_l0_b0);
    l2h_stats_disable_check_0_intr_o = l2h_stats_disable_check_0_intr_o | (rg_stats_disable_check_0_l0_b0);
    reg_stats_disable_check_0_l0_b1_next = (h2l_stats_disable_check_0_l0_b1_intr | rg_stats_disable_check_0_l0_b1);
    l2h_stats_disable_check_0_intr_o = l2h_stats_disable_check_0_intr_o | (rg_stats_disable_check_0_l0_b1);
    l2h_stats_disable_check_0_halt_o = 1'b0;
    reg_stats_disable_check_0_l0_b2_next = (h2l_stats_disable_check_0_l0_b2_intr | rg_stats_disable_check_0_l0_b2);
    l2h_stats_disable_check_0_intr_o = l2h_stats_disable_check_0_intr_o | (rg_stats_disable_check_0_l0_b2);
    l2h_stats_disable_check_0_halt_o = l2h_stats_disable_check_0_halt_o | (rg_stats_disable_check_0_l0_b2);
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_timer_sram_next = d2l_stats_disable_check_0_w [0] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_cbuf_fifo_next = d2l_stats_disable_check_0_w [1] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_lut_st_next = d2l_stats_disable_check_0_w [2] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_l0_b0_next = d2l_stats_disable_check_0_w [3] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_l0_b1_next = d2l_stats_disable_check_0_w [4] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_l0_b2_next = d2l_stats_disable_check_0_w [5] ;
    if (d2l_stats_disable_check_0_we) reg_stats_disable_check_0_l0_b3_next = d2l_stats_disable_check_0_w [6] ;
  end
  
  //------- reg assigns for stats_disable_check_0
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_stats_disable_check_0_timer_sram <= #1 1'd0;
      rg_stats_disable_check_0_cbuf_fifo <= #1 1'd0;
      rg_stats_disable_check_0_lut_st <= #1 1'd0;
      rg_stats_disable_check_0_l0_b0 <= #1 1'd0;
      rg_stats_disable_check_0_l0_b1 <= #1 1'd0;
      rg_stats_disable_check_0_l0_b2 <= #1 1'd0;
      rg_stats_disable_check_0_l0_b3 <= #1 1'd0;
    end
    else begin
      rg_stats_disable_check_0_timer_sram <= #1  reg_stats_disable_check_0_timer_sram_next;
      rg_stats_disable_check_0_cbuf_fifo <= #1  reg_stats_disable_check_0_cbuf_fifo_next;
      rg_stats_disable_check_0_lut_st <= #1  reg_stats_disable_check_0_lut_st_next;
      rg_stats_disable_check_0_l0_b0 <= #1  reg_stats_disable_check_0_l0_b0_next;
      rg_stats_disable_check_0_l0_b1 <= #1  reg_stats_disable_check_0_l0_b1_next;
      rg_stats_disable_check_0_l0_b2 <= #1  reg_stats_disable_check_0_l0_b2_next;
      rg_stats_disable_check_0_l0_b3 <= #1  reg_stats_disable_check_0_l0_b3_next;
    end
  end
  
  //------- combinatorial assigns for stats_disable_check_1
  always_comb begin
    reg_stats_disable_check_1_timer_sram_next = rg_stats_disable_check_1_timer_sram;
    l2h_stats_disable_check_1_timer_sram_r = rg_stats_disable_check_1_timer_sram;
    reg_stats_disable_check_1_cbuf_fifo_next = rg_stats_disable_check_1_cbuf_fifo;
    l2h_stats_disable_check_1_cbuf_fifo_r = rg_stats_disable_check_1_cbuf_fifo;
    reg_stats_disable_check_1_lut_st_next = rg_stats_disable_check_1_lut_st;
    l2h_stats_disable_check_1_lut_st_r = rg_stats_disable_check_1_lut_st;
    reg_stats_disable_check_1_l0_b0_next = rg_stats_disable_check_1_l0_b0;
    l2h_stats_disable_check_1_l0_b0_r = rg_stats_disable_check_1_l0_b0;
    reg_stats_disable_check_1_l0_b1_next = rg_stats_disable_check_1_l0_b1;
    l2h_stats_disable_check_1_l0_b1_r = rg_stats_disable_check_1_l0_b1;
    reg_stats_disable_check_1_l0_b2_next = rg_stats_disable_check_1_l0_b2;
    l2h_stats_disable_check_1_l0_b2_r = rg_stats_disable_check_1_l0_b2;
    reg_stats_disable_check_1_l0_b3_next = rg_stats_disable_check_1_l0_b3;
    l2h_stats_disable_check_1_l0_b3_r = rg_stats_disable_check_1_l0_b3;
    l2h_stats_disable_check_1_intr_o = 1'b0;
    reg_stats_disable_check_1_l0_b0_next = (h2l_stats_disable_check_1_l0_b0_intr | rg_stats_disable_check_1_l0_b0);
    l2h_stats_disable_check_1_intr_o = l2h_stats_disable_check_1_intr_o | (rg_stats_disable_check_1_l0_b0);
    reg_stats_disable_check_1_l0_b1_next = (h2l_stats_disable_check_1_l0_b1_intr | rg_stats_disable_check_1_l0_b1);
    l2h_stats_disable_check_1_intr_o = l2h_stats_disable_check_1_intr_o | (rg_stats_disable_check_1_l0_b1);
    l2h_stats_disable_check_1_halt_o = 1'b0;
    reg_stats_disable_check_1_l0_b2_next = (h2l_stats_disable_check_1_l0_b2_intr | rg_stats_disable_check_1_l0_b2);
    l2h_stats_disable_check_1_intr_o = l2h_stats_disable_check_1_intr_o | (rg_stats_disable_check_1_l0_b2);
    l2h_stats_disable_check_1_halt_o = l2h_stats_disable_check_1_halt_o | (rg_stats_disable_check_1_l0_b2);
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_timer_sram_next = d2l_stats_disable_check_1_w [0] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_cbuf_fifo_next = d2l_stats_disable_check_1_w [1] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_lut_st_next = d2l_stats_disable_check_1_w [2] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_l0_b0_next = d2l_stats_disable_check_1_w [3] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_l0_b1_next = d2l_stats_disable_check_1_w [4] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_l0_b2_next = d2l_stats_disable_check_1_w [5] ;
    if (d2l_stats_disable_check_1_we) reg_stats_disable_check_1_l0_b3_next = d2l_stats_disable_check_1_w [6] ;
  end
  
  //------- reg assigns for stats_disable_check_1
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_stats_disable_check_1_timer_sram <= #1 1'd0;
      rg_stats_disable_check_1_cbuf_fifo <= #1 1'd0;
      rg_stats_disable_check_1_lut_st <= #1 1'd0;
      rg_stats_disable_check_1_l0_b0 <= #1 1'd0;
      rg_stats_disable_check_1_l0_b1 <= #1 1'd0;
      rg_stats_disable_check_1_l0_b2 <= #1 1'd0;
      rg_stats_disable_check_1_l0_b3 <= #1 1'd0;
    end
    else begin
      rg_stats_disable_check_1_timer_sram <= #1  reg_stats_disable_check_1_timer_sram_next;
      rg_stats_disable_check_1_cbuf_fifo <= #1  reg_stats_disable_check_1_cbuf_fifo_next;
      rg_stats_disable_check_1_lut_st <= #1  reg_stats_disable_check_1_lut_st_next;
      rg_stats_disable_check_1_l0_b0 <= #1  reg_stats_disable_check_1_l0_b0_next;
      rg_stats_disable_check_1_l0_b1 <= #1  reg_stats_disable_check_1_l0_b1_next;
      rg_stats_disable_check_1_l0_b2 <= #1  reg_stats_disable_check_1_l0_b2_next;
      rg_stats_disable_check_1_l0_b3 <= #1  reg_stats_disable_check_1_l0_b3_next;
    end
  end
  
  //------- combinatorial assigns for rdr_roll32_counter_reg
  always_comb begin
    reg_rdr_roll32_counter_reg_count_next = rg_rdr_roll32_counter_reg_count;
    cntr_rdr_roll32_counter_reg_count_next = { 1'b0, rg_rdr_roll32_counter_reg_count};
    l2h_rdr_roll32_counter_reg_count_r = rg_rdr_roll32_counter_reg_count;
    if (d2l_rdr_roll32_counter_reg_we) cntr_rdr_roll32_counter_reg_count_next = d2l_rdr_roll32_counter_reg_w [3:0] ;
    if (h2l_rdr_roll32_counter_reg_count_incr)
       cntr_rdr_roll32_counter_reg_count_next = cntr_rdr_roll32_counter_reg_count_next + 5'd1;
    reg_rdr_roll32_counter_reg_count_next = cntr_rdr_roll32_counter_reg_count_next [3:0] ;
    if (h2l_rdr_roll32_counter_reg_count_we) reg_rdr_roll32_counter_reg_count_next = h2l_rdr_roll32_counter_reg_count_w;
  end
  
  //------- reg assigns for rdr_roll32_counter_reg
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_rdr_roll32_counter_reg_count <= #1 4'd0;
    end
    else begin
      rg_rdr_roll32_counter_reg_count <= #1  reg_rdr_roll32_counter_reg_count_next;
      l2h_rdr_roll32_counter_reg_count_overflow_o <= #1 cntr_rdr_roll32_counter_reg_count_next[4] & ~l2h_rdr_roll32_counter_reg_count_overflow_o;
    end
  end
  
  //------- combinatorial assigns for rdr_sat32_counter_reg (pio read data)
  always_comb begin
    l2d_rdr_sat32_counter_reg_r = 32'b0;
    l2d_rdr_sat32_counter_reg_r [3:0]  = rg_rdr_sat32_counter_reg_count;
  end
  
  //------- combinatorial assigns for rdr_roll32_counter_reg (pio read data)
  always_comb begin
    l2d_rdr_roll32_counter_reg_r = 32'b0;
    l2d_rdr_roll32_counter_reg_r [3:0]  = rg_rdr_roll32_counter_reg_count;
  end
  
  //------- combinatorial assigns for rdr_rcnt_sat_log
  always_comb begin
    reg_rdr_rcnt_sat_log_en_next = rg_rdr_rcnt_sat_log_en;
    l2h_rdr_rcnt_sat_log_en_r = rg_rdr_rcnt_sat_log_en;
    reg_rdr_rcnt_sat_log_subch_next = rg_rdr_rcnt_sat_log_subch;
    reg_rdr_rcnt_sat_log_str_next = rg_rdr_rcnt_sat_log_str;
    reg_rdr_rcnt_sat_log_count_next = rg_rdr_rcnt_sat_log_count;
    cntr_rdr_rcnt_sat_log_count_next = { 1'b0, rg_rdr_rcnt_sat_log_count};
    l2h_rdr_rcnt_sat_log_count_r = rg_rdr_rcnt_sat_log_count;
    if (h2l_rdr_rcnt_sat_log_subch_we) reg_rdr_rcnt_sat_log_subch_next = h2l_rdr_rcnt_sat_log_subch_w;
    if (h2l_rdr_rcnt_sat_log_str_we) reg_rdr_rcnt_sat_log_str_next = h2l_rdr_rcnt_sat_log_str_w;
    if (d2l_rdr_rcnt_sat_log_we) cntr_rdr_rcnt_sat_log_count_next = d2l_rdr_rcnt_sat_log_w [15:0] ;
    if (d2l_rdr_rcnt_sat_log_re) cntr_rdr_rcnt_sat_log_count_next = 16'b0;
    if (d2l_rdr_rcnt_sat_log_we) reg_rdr_rcnt_sat_log_en_next = d2l_rdr_rcnt_sat_log_w [31] ;
    if (d2l_rdr_rcnt_sat_log_we) reg_rdr_rcnt_sat_log_subch_next = d2l_rdr_rcnt_sat_log_w [30:26] ;
    if (d2l_rdr_rcnt_sat_log_re) reg_rdr_rcnt_sat_log_subch_next = 5'b0;
    if (d2l_rdr_rcnt_sat_log_we) reg_rdr_rcnt_sat_log_str_next = d2l_rdr_rcnt_sat_log_w [25:16] ;
    if (d2l_rdr_rcnt_sat_log_re) reg_rdr_rcnt_sat_log_str_next = 10'b0;
    h2l_rdr_rcnt_sat_log_count_incr = l2h_rdr_roll32_counter_reg_count_overflow_o;
    if (h2l_rdr_rcnt_sat_log_count_incr)
       cntr_rdr_rcnt_sat_log_count_next = cntr_rdr_rcnt_sat_log_count_next + 17'h1;
    if (cntr_rdr_rcnt_sat_log_count_next > 17'b1111111111111111)
       cntr_rdr_rcnt_sat_log_count_next = 17'b1111111111111111;
    l2h_rdr_rcnt_sat_log_count_incrsat_o = ( {1'b0, rg_rdr_rcnt_sat_log_count} == 17'b1111111111111111);
    reg_rdr_rcnt_sat_log_count_next = cntr_rdr_rcnt_sat_log_count_next [15:0] ;
    if (h2l_rdr_rcnt_sat_log_count_we) reg_rdr_rcnt_sat_log_count_next = h2l_rdr_rcnt_sat_log_count_w;
  end
  
  //------- reg assigns for rdr_rcnt_sat_log
  always_ff @ (posedge clk) begin
    if (reset) begin
      rg_rdr_rcnt_sat_log_en <= #1 1'd1;
      rg_rdr_rcnt_sat_log_subch <= #1 5'd0;
      rg_rdr_rcnt_sat_log_str <= #1 10'd0;
      rg_rdr_rcnt_sat_log_count <= #1 16'd0;
    end
    else begin
      rg_rdr_rcnt_sat_log_en <= #1  reg_rdr_rcnt_sat_log_en_next;
      rg_rdr_rcnt_sat_log_subch <= #1  reg_rdr_rcnt_sat_log_subch_next;
      rg_rdr_rcnt_sat_log_str <= #1  reg_rdr_rcnt_sat_log_str_next;
      rg_rdr_rcnt_sat_log_count <= #1  reg_rdr_rcnt_sat_log_count_next;
    end
  end
  
endmodule

